{"version":3,"sources":["components/UserContext.tsx","components/SalamiAddModal.tsx","components/SalamiRemoveModal.jsx","components/SalamiList.tsx","components/SalamiSampleList.tsx","components/Earn.tsx","components/Title.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["addSalamiContext","addOpen","setAddOpen","removeSalamiContext","removeOpen","status","setRemoveOpen","sampleData","id","name","amount","userContext","createContext","salamiAddModalContext","salamiRemoveModalContext","UserProvider","children","useState","sampleUsers","Provider","value","SalamiAddModal","open","salamiHandleAddClose","formData","setFormData","useContext","onClickHandler","e","target","Modal","onClose","onSubmit","preventDefault","a","fetch","method","body","JSON","stringify","headers","postFormData","json","success","earnCollection","noValidate","autoComplete","className","style","width","TextField","onChange","fullWidth","label","variant","type","Button","color","SalamiRemoveModal","onClick","axios","post","data","removeSalamiById","margin","SalamiList","user","index","salamiHandleRemoveOpen","TableRow","TableCell","align","to","_id","SalamiSampleList","Earn","users","setUsers","useEffect","get","response","salmiData","salamiData","catch","err","console","log","message","Grid","container","item","xs","TableContainer","Table","TableBody","length","map","person","colSpan","reduce","acc","current","Number","Title","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2687c9a9.chunk.js","sourcesContent":["import { useState, createContext, ReactNode } from \"react\";\n\n// interface\ninterface ISampleUsers {\n  id: number;\n  name: string;\n  amount: number;\n  status: string;\n}\n\ntype ReactNodeType = {\n  children: ReactNode;\n};\n\nconst addSalamiContext = {\n  addOpen: false,\n  setAddOpen: (addOpen: boolean) => {},\n};\n\nconst removeSalamiContext = {\n  removeOpen: { status: false },\n  setRemoveOpen: (removeOpen: { status: boolean; id?: number }) => {},\n};\n\nconst sampleData: ISampleUsers[] = [\n  { id: 1, name: \"বড় মামা\", amount: 100, status: \"earn\" },\n  { id: 2, name: \"চাচা\", amount: 200, status: \"earn\" },\n  { id: 3, name: \"খালা মানি\", amount: 300, status: \"earn\" },\n];\n\nexport const userContext = createContext<ISampleUsers[]>(sampleData);\nexport const salamiAddModalContext = createContext(addSalamiContext);\nexport const salamiRemoveModalContext = createContext(removeSalamiContext);\n\nexport function UserProvider({ children }: ReactNodeType) {\n  const [sampleUsers, setSampleUsers] = useState<ISampleUsers[]>(sampleData);\n  const [addOpen, setAddOpen] = useState(addSalamiContext.addOpen);\n  const [removeOpen, setRemoveOpen] = useState(removeSalamiContext.removeOpen);\n\n  return (\n    <userContext.Provider value={sampleUsers}>\n      <salamiAddModalContext.Provider value={{ addOpen, setAddOpen }}>\n        <salamiRemoveModalContext.Provider\n          value={{ removeOpen, setRemoveOpen }}\n        >\n          {children}\n        </salamiRemoveModalContext.Provider>\n      </salamiAddModalContext.Provider>\n    </userContext.Provider>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { salamiAddModalContext } from \"./UserContext\";\n\ninterface ISate {\n  formData: {\n    name: string;\n    amount: Number;\n  }[];\n}\n\ninterface IProps {\n  open: boolean;\n  salamiHandleAddClose: () => void;\n}\n\nfunction SalamiAddModal({ open, salamiHandleAddClose }: IProps) {\n  const [formData, setFormData] = useState<ISate[\"formData\"]>([]);\n  const { setAddOpen } = useContext(salamiAddModalContext);\n\n  const onClickHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const onSubmitHandler = (e: React.ChangeEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    // Post data in MongoDB\n    const earnCollection = async () => {\n      const postFormData = await fetch(\n        \"https://eid-salami.herokuapp.com/earn\",\n        {\n          method: \"POST\",\n          body: JSON.stringify(formData),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n          },\n        }\n      );\n      const jsonData = await postFormData.json();\n      if (jsonData.success) {\n        setAddOpen(false);\n      }\n    };\n    earnCollection();\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={salamiHandleAddClose}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      <form\n        onSubmit={onSubmitHandler}\n        noValidate\n        autoComplete=\"off\"\n        className=\"modal-wrapper\"\n        style={{ width: \"500px\" }}\n      >\n        <h3>সালামি নিবন্ধন</h3>\n        <TextField\n          name=\"name\"\n          id=\"outlined-basic\"\n          onChange={onClickHandler}\n          fullWidth\n          label=\"যার থেকে সালামি পেয়েছি\"\n          variant=\"outlined\"\n        />\n        <TextField\n          type=\"number\"\n          name=\"amount\"\n          id=\"outlined-basic\"\n          onChange={onClickHandler}\n          fullWidth\n          label=\"যত টাকা পেয়েছি\"\n          variant=\"outlined\"\n        />\n        <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\n          জমা করি\n        </Button>\n      </form>\n    </Modal>\n  );\n}\n\nexport default SalamiAddModal;\n","import React, { useContext } from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport { salamiRemoveModalContext } from './UserContext';\nimport axios from 'axios';\n\nfunction SalamiRemoveModal({ open }) {\n  const {removeOpen, setRemoveOpen} = useContext(salamiRemoveModalContext);\n\n  // Salami Remove Handler\n  const salamiRemoveHandler = (e) => {\n    e.preventDefault();\n    \n    // Remove salami from the database\n    const removeSalamiById = async () => {\n      const response = await axios.post('https://eid-salami.herokuapp.com/remove-salami-by-id', {\n        id: open.id\n      });\n      if(response.data.success){\n        setRemoveOpen(false)\n      }\n    }\n    removeSalamiById();\n  }\n\n  // Salami close Handler\n  const salamiCloseHandler = (e) => {\n    e.preventDefault();\n    setRemoveOpen({\n      status: false\n    })\n  }\n\n  return (\n    <Modal\n      open={open.status}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      <div className=\"modal-wrapper\" style={{width: '300px'}}>\n        <h3>সত্যি মুছে ফেলতে চাও?</h3>\n        <div className=\"buttons\">\n          <Button type=\"button\" onClick={salamiRemoveHandler} variant=\"contained\" color=\"secondary\" style={{margin: '20px'}}>\n            হ্যাঁ\n          </Button>\n          <Button type=\"button\" onClick={salamiCloseHandler} variant=\"contained\" color=\"primary\" style={{margin: '20px'}}>\n            না\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default SalamiRemoveModal;","import TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport { Link } from \"react-router-dom\";\n\n// icon\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\n\n// types\ninterface IProps {\n  user: {\n    _id: number;\n    name: string;\n    amount: number;\n  };\n  index: number;\n  salamiHandleRemoveOpen: (id: number) => void;\n}\n\nfunction SalamiList({ user, index, salamiHandleRemoveOpen }: IProps) {\n  return (\n    <TableRow key={user._id}>\n      <TableCell>\n        <b>{index + 1}</b>\n      </TableCell>\n      <TableCell>{user.name}</TableCell>\n      <TableCell align=\"center\">৳ {user.amount}</TableCell>\n      <TableCell align=\"center\" style={{ width: \"100px\" }}>\n        <Link to=\"/\">\n          <EditIcon style={{ color: \"green\" }} />\n        </Link>\n      </TableCell>\n      <TableCell align=\"center\" style={{ width: \"100px\" }}>\n        <Link to=\"/\" onClick={(e) => salamiHandleRemoveOpen(user._id)}>\n          <DeleteForeverIcon style={{ color: \"red\" }} />\n        </Link>\n      </TableCell>\n    </TableRow>\n  );\n}\n\nexport default SalamiList;\n","import TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport { Link } from \"react-router-dom\";\n\n// icon\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\n\n// Interface\ninterface IProps {\n  user: {\n    id: number;\n    name: string;\n    amount: number;\n    status: string;\n  };\n}\n\nfunction SalamiSampleList({ user }: IProps) {\n  return (\n    <TableRow key={user.id}>\n      <TableCell>{user.id}</TableCell>\n      <TableCell>{user.name}</TableCell>\n      <TableCell align=\"center\">৳ {user.amount}</TableCell>\n      <TableCell align=\"center\" style={{ width: \"100px\" }}>\n        <Link to=\"/\">\n          <EditIcon style={{ color: \"green\" }} />\n        </Link>\n      </TableCell>\n      <TableCell align=\"center\" style={{ width: \"100px\" }}>\n        <Link to=\"/\">\n          <DeleteForeverIcon style={{ color: \"red\" }} />\n        </Link>\n      </TableCell>\n    </TableRow>\n  );\n}\n\nexport default SalamiSampleList;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Button from \"@material-ui/core/Button\";\nimport Modal from \"@material-ui/core/Modal\";\nimport SalamiAddModal from \"./SalamiAddModal\";\nimport SalamiRemoveModal from \"./SalamiRemoveModal\";\nimport axios from \"axios\";\nimport SalamiList from \"./SalamiList\";\nimport SalamiSampleList from \"./SalamiSampleList\";\n\nimport { userContext } from \"./UserContext\";\nimport { salamiAddModalContext } from \"./UserContext\";\nimport { salamiRemoveModalContext } from \"./UserContext\";\n\n// interface\ninterface ISate {\n  users: {\n    _id: number;\n    name: string;\n    amount: number;\n  }[];\n  sampleUser: {\n    id: number;\n    name: string;\n    amount: number;\n    status: string;\n  }[];\n}\n\nfunction Earn() {\n  const sampleUsers = useContext<ISate[\"sampleUser\"]>(userContext);\n  const { addOpen, setAddOpen } = useContext(salamiAddModalContext);\n  const { removeOpen, setRemoveOpen } = useContext(salamiRemoveModalContext);\n  const [users, setUsers] = useState<ISate[\"users\"]>([]);\n\n  useEffect(() => {\n    const salamiData = async () => {\n      const response = await axios.get(\"http://localhost:3500/all-salami\");\n      const salmiData = response.data;\n      setUsers(salmiData);\n    };\n    salamiData().catch((err) => console.log(err.message));\n  }, []);\n\n  // Total Amount\n  const totalAmount = () => {\n    return users.reduce(\n      (acc, current) => Number(acc) + Number(current.amount),\n      0\n    );\n  };\n\n  // Salami Handle Modal Add\n  const salamiHandleAddOpen = () => {\n    setAddOpen(true);\n  };\n\n  // Salami Handle Modal Add\n  const salamiHandleAddClose = () => {\n    setAddOpen(false);\n  };\n\n  // Salami Handle Modal Remove\n  const salamiHandleRemoveOpen = (id: number) => {\n    setRemoveOpen({\n      status: true,\n      id: id,\n    });\n  };\n\n  // Salami Handle Modal Remove\n  const salamiHandleRemoveClose = () => {\n    setRemoveOpen({\n      status: false,\n    });\n  };\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <TableContainer>\n          <Table>\n            <TableBody>\n              {/* Table Header */}\n              <TableRow>\n                <TableCell></TableCell>\n                <TableCell>\n                  <b>নাম</b>\n                </TableCell>\n                <TableCell align=\"center\">\n                  <b>টাকা</b>\n                </TableCell>\n                <TableCell align=\"center\" style={{ width: \"100px\" }}>\n                  <b>সম্পাদনা</b>\n                </TableCell>\n                <TableCell align=\"center\" style={{ width: \"100px\" }}>\n                  <b>অপসারণ</b>\n                </TableCell>\n              </TableRow>\n              {\n                /* Table body from loop */\n                users.length\n                  ? users.map((person, index) => (\n                      <SalamiList\n                        user={person}\n                        index={index}\n                        salamiHandleRemoveOpen={salamiHandleRemoveOpen}\n                      />\n                    ))\n                  : sampleUsers.map((person) => (\n                      <SalamiSampleList user={person} />\n                    ))\n              }\n\n              {/* Total Amount */}\n              <TableRow>\n                <TableCell colSpan={2} align=\"right\">\n                  <b>ঈদ এ মোট সালামি উঠেছে</b>\n                </TableCell>\n                <TableCell align=\"center\">\n                  <b>৳ {totalAmount() || \"600\"}</b>\n                </TableCell>\n                <TableCell colSpan={2}>\n                  <Button\n                    type=\"button\"\n                    onClick={salamiHandleAddOpen}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ margin: \"10px 0px 0px 50px\" }}\n                  >\n                    ঈদ সালামি যোগ করুন\n                  </Button>\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Grid>\n\n      <SalamiAddModal\n        open={addOpen}\n        salamiHandleAddClose={salamiHandleAddClose}\n      />\n      <SalamiRemoveModal open={removeOpen} />\n    </Grid>\n  );\n}\n\nexport default Earn;\n","function Title() {\n  return <h1>ঈদ সালামির হিসাব নিকাশ</h1>;\n}\n\nexport default Title;\n","import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Earn from \"./components/Earn\";\nimport Title from \"./components/Title\";\nimport { UserProvider } from \"./components/UserContext\";\n\nfunction App() {\n  return (\n    <div className=\"container-width\">\n      <UserProvider>\n        <Title />\n        <Router>\n          <Switch>\n            <Route exact path=\"/\">\n              <Earn />\n            </Route>\n          </Switch>\n        </Router>\n      </UserProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}